# -*- coding:utf-8 -*-
# Author : Inyong Hwang
# 2. Generating Character, Directory by Characters
# - English Uppercase and Lowercase Integration.
# - Double Korean and Number.

import dict
import os
from tqdm import tqdm
from PIL import Image, ImageFont, ImageDraw

new = dict.character_encoding()
character = list(new.keys())

fonts_directory = 'D:/Dataset/OCR/STR/DATA_1v2/FONT'

ttc_directory = fonts_directory + '/TTC'
ttc_fonts = []
ttcs = os.listdir(ttc_directory)
for ttc in ttcs:
    ttc_fonts.append(ttc_directory + '/' + ttc)

ttf_directory = fonts_directory + '/KOREAN'
ttf_fonts = []
ttfs = os.listdir(ttf_directory)
for ttf in ttfs:
    ttf_fonts.append(ttf_directory + '/' + ttf)

font_size = 44
font_size2 = 48
image_size = [64, 64]
# num = character[0:10]
low_eng = character[10:36]
up_eng = character[36:62]
# kor = character[62:]
eng = character[10:62]


for i in tqdm(range(0, len(character))):
    # eng - upper, lower: integration
    if character[i] in eng:
        if character[i] in low_eng:
            char_dir = hex(ord(character[i]))
            save_dir = str(ttc_directory).replace('_1v2', '_1v4').replace('FONT/TTC', 'CHARACTER/' + char_dir)
            # print(save_dir)
            if os.path.isdir(save_dir):
                pass
            else:
                os.mkdir(save_dir)
            # ttc
            for j in range(0, len(ttc_fonts)):
                image = Image.new('RGB', size=image_size, color='white')
                draw = ImageDraw.Draw(image)
                font = ImageFont.truetype(ttc_fonts[j], font_size)
                draw.text((10, 10), character[i], font=font, fill='black')
                image_path = save_dir + '/1' + ttcs[j].replace('.ttc', '_') + hex(ord(character[i])) + '.png'
                # print(image_path)
                image.save(image_path)
            # ttf
            for k in range(0, len(ttf_fonts)):
                image = Image.new('RGB', size=image_size, color='white')
                draw = ImageDraw.Draw(image)
                font = ImageFont.truetype(ttf_fonts[k], font_size)
                draw.text((10, 10), character[i], font=font, fill='black')
                image_path = save_dir + '/1' + ttfs[k].replace('.ttf', '_') + hex(ord(character[i])) + '.png'
                # print(image_path)
                image.save(image_path)
        elif character[i] in up_eng:
            char_dir = hex(ord(character[i-26]))
            save_dir = str(ttc_directory).replace('_1v2', '_1v4').replace('FONT/TTC', 'CHARACTER/' + char_dir)
            # print(save_dir)
            if os.path.isdir(save_dir):
                pass
            else:
                os.mkdir(save_dir)
            # ttc
            for j in range(0, len(ttc_fonts)):
                image = Image.new('RGB', size=image_size, color='white')
                draw = ImageDraw.Draw(image)
                font = ImageFont.truetype(ttc_fonts[j], font_size)
                draw.text((10, 10), character[i], font=font, fill='black')
                image_path = save_dir + '/2' + ttcs[j].replace('.ttc', '_') + hex(ord(character[i-26])) + '.png'
                # print(image_path)
                image.save(image_path)
            # ttf
            for k in range(0, len(ttf_fonts)):
                image = Image.new('RGB', size=image_size, color='white')
                draw = ImageDraw.Draw(image)
                font = ImageFont.truetype(ttf_fonts[k], font_size)
                draw.text((10, 10), character[i], font=font, fill='black')
                image_path = save_dir + '/2' + ttfs[k].replace('.ttf', '_') + hex(ord(character[i-26])) + '.png'
                # print(image_path)
                image.save(image_path)
    # kor, num: double
    else:
        char_dir = hex(ord(character[i]))
        save_dir = str(ttc_directory).replace('_1v2', '_1v4').replace('FONT/TTC', 'CHARACTER/' + char_dir)
        # print(save_dir)
        if os.path.isdir(save_dir):
            pass
        else:
            os.mkdir(save_dir)
        # ttc
        for j in range(0, len(ttc_fonts)):
            image = Image.new('RGB', size=image_size, color='white')
            draw = ImageDraw.Draw(image)
            font = ImageFont.truetype(ttc_fonts[j], font_size)
            draw.text((10, 10), character[i], font=font, fill='black')
            image_path = save_dir + '/1' + ttcs[j].replace('.ttc', '_') + hex(ord(character[i])) + '.png'
            # print(image_path)
            image.save(image_path)
        # ttf
        for k in range(0, len(ttf_fonts)):
            image = Image.new('RGB', size=image_size, color='white')
            draw = ImageDraw.Draw(image)
            font = ImageFont.truetype(ttf_fonts[k], font_size)
            draw.text((10, 10), character[i], font=font, fill='black')
            image_path = save_dir + '/1' + ttfs[k].replace('.ttf', '_') + hex(ord(character[i])) + '.png'
            # print(image_path)
            image.save(image_path)
        # ttc
        for j in range(0, len(ttc_fonts)):
            image = Image.new('RGB', size=image_size, color='white')
            draw = ImageDraw.Draw(image)
            font = ImageFont.truetype(ttc_fonts[j], font_size2)
            draw.text((10, 10), character[i], font=font, fill='black')
            image_path = save_dir + '/2' + ttcs[j].replace('.ttc', '_') + hex(ord(character[i])) + '.png'
            # print(image_path)
            image.save(image_path)
        # ttf
        for k in range(0, len(ttf_fonts)):
            image = Image.new('RGB', size=image_size, color='white')
            draw = ImageDraw.Draw(image)
            font = ImageFont.truetype(ttf_fonts[k], font_size2)
            draw.text((10, 10), character[i], font=font, fill='black')
            image_path = save_dir + '/2' + ttfs[k].replace('.ttf', '_') + hex(ord(character[i])) + '.png'
            # print(image_path)
            image.save(image_path)
